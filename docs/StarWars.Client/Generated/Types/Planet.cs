//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace StarWars.Client;


public static class PlanetExtensions
{
    [GraphQLMember("residentConnection")]
    public static PlanetResidentsConnection ResidentConnection(this Planet  planet, [GraphQLArgument("after", "String")] string after = null, [GraphQLArgument("first", "Int")] int? first = null, [GraphQLArgument("before", "String")] string before = null, [GraphQLArgument("last", "Int")] int? last = null)
    {
        return planet.GetMethodValue<PlanetResidentsConnection>("residentConnection", after, first, before, last);
    }

    [GraphQLMember("filmConnection")]
    public static PlanetFilmsConnection FilmConnection(this Planet  planet, [GraphQLArgument("after", "String")] string after = null, [GraphQLArgument("first", "Int")] int? first = null, [GraphQLArgument("before", "String")] string before = null, [GraphQLArgument("last", "Int")] int? last = null)
    {
        return planet.GetMethodValue<PlanetFilmsConnection>("filmConnection", after, first, before, last);
    }

}

/// <summary>
/// A large mass, planet or planetoid in the Star Wars Universe, at the time of
/// 0 ABY.
/// </summary>
public partial class Planet : GraphQLTypeBase, Node
{
    /// <summary>
    /// The name of this planet.
    /// </summary>
    [GraphQLMember("name")]
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// The diameter of this planet in kilometers.
    /// </summary>
    [GraphQLMember("diameter")]
    [JsonPropertyName("diameter")]
    public int? Diameter { get; set; }

    /// <summary>
    /// The number of standard hours it takes for this planet to complete a single
/// rotation on its axis.
    /// </summary>
    [GraphQLMember("rotationPeriod")]
    [JsonPropertyName("rotationPeriod")]
    public int? RotationPeriod { get; set; }

    /// <summary>
    /// The number of standard days it takes for this planet to complete a single orbit
/// of its local star.
    /// </summary>
    [GraphQLMember("orbitalPeriod")]
    [JsonPropertyName("orbitalPeriod")]
    public int? OrbitalPeriod { get; set; }

    /// <summary>
    /// A number denoting the gravity of this planet, where "1" is normal or 1 standard
/// G. "2" is twice or 2 standard Gs. "0.5" is half or 0.5 standard Gs.
    /// </summary>
    [GraphQLMember("gravity")]
    [JsonPropertyName("gravity")]
    public string Gravity { get; set; }

    /// <summary>
    /// The average population of sentient beings inhabiting this planet.
    /// </summary>
    [GraphQLMember("population")]
    [JsonPropertyName("population")]
    public double? Population { get; set; }

    /// <summary>
    /// The climates of this planet.
    /// </summary>
    [GraphQLMember("climates")]
    [JsonPropertyName("climates")]
    public List<string> Climates { get; set; }

    /// <summary>
    /// The terrains of this planet.
    /// </summary>
    [GraphQLMember("terrains")]
    [JsonPropertyName("terrains")]
    public List<string> Terrains { get; set; }

    /// <summary>
    /// The percentage of the planet surface that is naturally occurring water or bodies
/// of water.
    /// </summary>
    [GraphQLMember("surfaceWater")]
    [JsonPropertyName("surfaceWater")]
    public double? SurfaceWater { get; set; }

    private LazyProperty<PlanetResidentsConnection> _residentConnection = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public PlanetResidentsConnection ResidentConnection => _residentConnection.Value(() => GetFirstMethodValue<PlanetResidentsConnection>("residentConnection"));

    private LazyProperty<PlanetFilmsConnection> _filmConnection = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public PlanetFilmsConnection FilmConnection => _filmConnection.Value(() => GetFirstMethodValue<PlanetFilmsConnection>("filmConnection"));

    /// <summary>
    /// The ISO 8601 date format of the time that this resource was created.
    /// </summary>
    [GraphQLMember("created")]
    [JsonPropertyName("created")]
    public string Created { get; set; }

    /// <summary>
    /// The ISO 8601 date format of the time that this resource was edited.
    /// </summary>
    [GraphQLMember("edited")]
    [JsonPropertyName("edited")]
    public string Edited { get; set; }

    /// <summary>
    /// The ID of an object
    /// </summary>
    [GraphQLMember("id")]
    [JsonPropertyName("id")]
    public string Id { get; set; }

    [GraphQLMember("__typename")]
    [JsonPropertyName("__typename")]
    public string __TypeName { get; set; }
}
