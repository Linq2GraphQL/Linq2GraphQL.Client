//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;

namespace StartGG.Client;

public static class IF 
{ 
	public static BracketSetGameDataInput BracketSetGameData() 
	{
		return new BracketSetGameDataInput();
	}
	public static BracketSetGameSelectionInput BracketSetGameSelection() 
	{
		return new BracketSetGameSelectionInput();
	}
	public static EventEntrantPageQuery EventEntrantPageQuery() 
	{
		return new EventEntrantPageQuery();
	}
	public static EventEntrantPageQueryFilter EventEntrantPageQueryFilter() 
	{
		return new EventEntrantPageQueryFilter();
	}
	public static EventFilter EventFilter() 
	{
		return new EventFilter();
	}
	public static EventOwnersQuery EventOwnersQuery() 
	{
		return new EventOwnersQuery();
	}
	public static LeagueEventsFilter LeagueEventsFilter() 
	{
		return new LeagueEventsFilter();
	}
	public static LeagueEventsQuery LeagueEventsQuery() 
	{
		return new LeagueEventsQuery();
	}
	public static LeaguePageFilter LeaguePageFilter() 
	{
		return new LeaguePageFilter();
	}
	public static LeagueQuery LeagueQuery() 
	{
		return new LeagueQuery();
	}
	public static LocationFilterType LocationFilterType() 
	{
		return new LocationFilterType();
	}
	public static PaginationSearchType PaginationSearchType() 
	{
		return new PaginationSearchType();
	}
	public static ParticipantPageFilter ParticipantPageFilter() 
	{
		return new ParticipantPageFilter();
	}
	public static ParticipantPaginationQuery ParticipantPaginationQuery() 
	{
		return new ParticipantPaginationQuery();
	}
	public static PhaseGroupPageQuery PhaseGroupPageQuery() 
	{
		return new PhaseGroupPageQuery();
	}
	public static PhaseGroupPageQueryFilter PhaseGroupPageQueryFilter() 
	{
		return new PhaseGroupPageQueryFilter();
	}
	public static PhaseGroupUpdateInput PhaseGroupUpdate() 
	{
		return new PhaseGroupUpdateInput();
	}
	public static PhaseUpsertInput PhaseUpsert() 
	{
		return new PhaseUpsertInput();
	}
	public static ResolveConflictsLockedSeedConfig ResolveConflictsLockedSeedConfig() 
	{
		return new ResolveConflictsLockedSeedConfig();
	}
	public static ResolveConflictsOptions ResolveConflictsOptions() 
	{
		return new ResolveConflictsOptions();
	}
	public static SeedPageFilter SeedPageFilter() 
	{
		return new SeedPageFilter();
	}
	public static SeedPaginationQuery SeedPaginationQuery() 
	{
		return new SeedPaginationQuery();
	}
	public static SetFilterLocation SetFilterLocation() 
	{
		return new SetFilterLocation();
	}
	public static SetFilterLocationDistanceFrom SetFilterLocationDistanceFrom() 
	{
		return new SetFilterLocationDistanceFrom();
	}
	public static SetFilterLocationDistanceFromPoint SetFilterLocationDistanceFromPoint() 
	{
		return new SetFilterLocationDistanceFromPoint();
	}
	public static SetFilters SetFilters() 
	{
		return new SetFilters();
	}
	public static ShopLevelsQuery ShopLevelsQuery() 
	{
		return new ShopLevelsQuery();
	}
	public static ShopOrderMessagesQuery ShopOrderMessagesQuery() 
	{
		return new ShopOrderMessagesQuery();
	}
	public static StandingGroupStandingPageFilter StandingGroupStandingPageFilter() 
	{
		return new StandingGroupStandingPageFilter();
	}
	public static StandingPageFilter StandingPageFilter() 
	{
		return new StandingPageFilter();
	}
	public static StandingPaginationQuery StandingPaginationQuery() 
	{
		return new StandingPaginationQuery();
	}
	public static StationFilter StationFilter() 
	{
		return new StationFilter();
	}
	public static StationUpsertInput StationUpsert() 
	{
		return new StationUpsertInput();
	}
	public static TeamPaginationFilter TeamPaginationFilter() 
	{
		return new TeamPaginationFilter();
	}
	public static TeamPaginationQuery TeamPaginationQuery() 
	{
		return new TeamPaginationQuery();
	}
	public static TopGameFilter TopGameFilter() 
	{
		return new TopGameFilter();
	}
	public static TournamentLocationFilter TournamentLocationFilter() 
	{
		return new TournamentLocationFilter();
	}
	public static TournamentPageFilter TournamentPageFilter() 
	{
		return new TournamentPageFilter();
	}
	public static TournamentQuery TournamentQuery() 
	{
		return new TournamentQuery();
	}
	public static TournamentRegistrationInput TournamentRegistration() 
	{
		return new TournamentRegistrationInput();
	}
	public static UpdatePhaseSeedInfo UpdatePhaseSeedInfo() 
	{
		return new UpdatePhaseSeedInfo();
	}
	public static UpdatePhaseSeedingOptions UpdatePhaseSeedingOptions() 
	{
		return new UpdatePhaseSeedingOptions();
	}
	public static UserEventsPaginationFilter UserEventsPaginationFilter() 
	{
		return new UserEventsPaginationFilter();
	}
	public static UserEventsPaginationQuery UserEventsPaginationQuery() 
	{
		return new UserEventsPaginationQuery();
	}
	public static UserLeaguesPaginationFilter UserLeaguesPaginationFilter() 
	{
		return new UserLeaguesPaginationFilter();
	}
	public static UserLeaguesPaginationQuery UserLeaguesPaginationQuery() 
	{
		return new UserLeaguesPaginationQuery();
	}
	public static UserTournamentsPaginationFilter UserTournamentsPaginationFilter() 
	{
		return new UserTournamentsPaginationFilter();
	}
	public static UserTournamentsPaginationQuery UserTournamentsPaginationQuery() 
	{
		return new UserTournamentsPaginationQuery();
	}
	public static VideogamePageFilter VideogamePageFilter() 
	{
		return new VideogamePageFilter();
	}
	public static VideogameQuery VideogameQuery() 
	{
		return new VideogameQuery();
	}
	public static WaveUpsertInput WaveUpsert() 
	{
		return new WaveUpsertInput();
	}
}



public static class BracketSetGameDataInputExtensions
{ 
	    public static BracketSetGameDataInput WinnerId(this BracketSetGameDataInput input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.WinnerId = filter;
        return input;
    }


    public static BracketSetGameDataInput GameNum(this BracketSetGameDataInput input, int val)
    {
         input.GameNum = val;
         return input;
    }


    public static BracketSetGameDataInput Entrant1Score(this BracketSetGameDataInput input, int? val)
    {
         input.Entrant1Score = val;
         return input;
    }


    public static BracketSetGameDataInput Entrant2Score(this BracketSetGameDataInput input, int? val)
    {
         input.Entrant2Score = val;
         return input;
    }

    public static BracketSetGameDataInput StageId(this BracketSetGameDataInput input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.StageId = filter;
        return input;
    }

    public static BracketSetGameDataInput Selections(this BracketSetGameDataInput input, Action<List<BracketSetGameSelectionInput>> mod)
    {
        var filter = new List<BracketSetGameSelectionInput>();
        mod ??= _ => { };
        mod(filter); 
        input.Selections = filter;
        return input;
    }

}

public static class BracketSetGameSelectionInputExtensions
{ 
	    public static BracketSetGameSelectionInput EntrantId(this BracketSetGameSelectionInput input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.EntrantId = filter;
        return input;
    }


    public static BracketSetGameSelectionInput CharacterId(this BracketSetGameSelectionInput input, int? val)
    {
         input.CharacterId = val;
         return input;
    }

}

public static class EventEntrantPageQueryExtensions
{ 
	
    public static EventEntrantPageQuery Page(this EventEntrantPageQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static EventEntrantPageQuery PerPage(this EventEntrantPageQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static EventEntrantPageQuery SortBy(this EventEntrantPageQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static EventEntrantPageQuery Filter(this EventEntrantPageQuery input, Action<EventEntrantPageQueryFilter> mod)
    {
        var filter = new EventEntrantPageQueryFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class EventEntrantPageQueryFilterExtensions
{ 
	
    public static EventEntrantPageQueryFilter Name(this EventEntrantPageQueryFilter input, string val)
    {
         input.Name = val;
         return input;
    }

}

public static class EventFilterExtensions
{ 
	    public static EventFilter VideogameId(this EventFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.VideogameId = filter;
        return input;
    }


    public static EventFilter Type(this EventFilter input, List<int?> val)
    {
         input.Type = val;
         return input;
    }


    public static EventFilter Published(this EventFilter input, bool? val)
    {
         input.Published = val;
         return input;
    }

    public static EventFilter Id(this EventFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }

    public static EventFilter Ids(this EventFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.Ids = filter;
        return input;
    }


    public static EventFilter Slug(this EventFilter input, string val)
    {
         input.Slug = val;
         return input;
    }

    public static EventFilter FantasyEventId(this EventFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.FantasyEventId = filter;
        return input;
    }


    public static EventFilter FantasyRosterHash(this EventFilter input, string val)
    {
         input.FantasyRosterHash = val;
         return input;
    }

}

public static class EventOwnersQueryExtensions
{ 
	
    public static EventOwnersQuery Page(this EventOwnersQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static EventOwnersQuery PerPage(this EventOwnersQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static EventOwnersQuery SortBy(this EventOwnersQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

}

public static class LeagueEventsFilterExtensions
{ 
	    public static LeagueEventsFilter Search(this LeagueEventsFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }

    public static LeagueEventsFilter PointMappingGroupIds(this LeagueEventsFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.PointMappingGroupIds = filter;
        return input;
    }

    public static LeagueEventsFilter TierIds(this LeagueEventsFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.TierIds = filter;
        return input;
    }

    public static LeagueEventsFilter UserId(this LeagueEventsFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.UserId = filter;
        return input;
    }


    public static LeagueEventsFilter Upcoming(this LeagueEventsFilter input, bool? val)
    {
         input.Upcoming = val;
         return input;
    }

    public static LeagueEventsFilter LeagueEntrantId(this LeagueEventsFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.LeagueEntrantId = filter;
        return input;
    }

}

public static class LeagueEventsQueryExtensions
{ 
	
    public static LeagueEventsQuery Page(this LeagueEventsQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static LeagueEventsQuery PerPage(this LeagueEventsQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static LeagueEventsQuery SortBy(this LeagueEventsQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static LeagueEventsQuery Filter(this LeagueEventsQuery input, Action<LeagueEventsFilter> mod)
    {
        var filter = new LeagueEventsFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class LeaguePageFilterExtensions
{ 
	    public static LeaguePageFilter Id(this LeaguePageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }

    public static LeaguePageFilter Ids(this LeaguePageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.Ids = filter;
        return input;
    }

    public static LeaguePageFilter OwnerId(this LeaguePageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.OwnerId = filter;
        return input;
    }

    public static LeaguePageFilter AfterDate(this LeaguePageFilter input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.AfterDate = filter;
        return input;
    }

    public static LeaguePageFilter BeforeDate(this LeaguePageFilter input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.BeforeDate = filter;
        return input;
    }

    public static LeaguePageFilter ComputedUpdatedAt(this LeaguePageFilter input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.ComputedUpdatedAt = filter;
        return input;
    }


    public static LeaguePageFilter Name(this LeaguePageFilter input, string val)
    {
         input.Name = val;
         return input;
    }


    public static LeaguePageFilter IsFeatured(this LeaguePageFilter input, bool? val)
    {
         input.IsFeatured = val;
         return input;
    }


    public static LeaguePageFilter HasBannerImages(this LeaguePageFilter input, bool? val)
    {
         input.HasBannerImages = val;
         return input;
    }


    public static LeaguePageFilter ActiveShops(this LeaguePageFilter input, bool? val)
    {
         input.ActiveShops = val;
         return input;
    }


    public static LeaguePageFilter Past(this LeaguePageFilter input, bool? val)
    {
         input.Past = val;
         return input;
    }


    public static LeaguePageFilter Published(this LeaguePageFilter input, bool? val)
    {
         input.Published = val;
         return input;
    }


    public static LeaguePageFilter PubliclySearchable(this LeaguePageFilter input, bool? val)
    {
         input.PubliclySearchable = val;
         return input;
    }


    public static LeaguePageFilter Upcoming(this LeaguePageFilter input, bool? val)
    {
         input.Upcoming = val;
         return input;
    }

    public static LeaguePageFilter VideogameIds(this LeaguePageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.VideogameIds = filter;
        return input;
    }

}

public static class LeagueQueryExtensions
{ 
	
    public static LeagueQuery Page(this LeagueQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static LeagueQuery PerPage(this LeagueQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static LeagueQuery SortBy(this LeagueQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static LeagueQuery Filter(this LeagueQuery input, Action<LeaguePageFilter> mod)
    {
        var filter = new LeaguePageFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }


    public static LeagueQuery Sort(this LeagueQuery input, TournamentPaginationSort? val)
    {
         input.Sort = val;
         return input;
    }

}

public static class LocationFilterTypeExtensions
{ 
	
    public static LocationFilterType CountryCode(this LocationFilterType input, string val)
    {
         input.CountryCode = val;
         return input;
    }


    public static LocationFilterType State(this LocationFilterType input, string val)
    {
         input.State = val;
         return input;
    }


    public static LocationFilterType City(this LocationFilterType input, string val)
    {
         input.City = val;
         return input;
    }

}

public static class PaginationSearchTypeExtensions
{ 
	
    public static PaginationSearchType FieldsToSearch(this PaginationSearchType input, List<string> val)
    {
         input.FieldsToSearch = val;
         return input;
    }


    public static PaginationSearchType SearchString(this PaginationSearchType input, string val)
    {
         input.SearchString = val;
         return input;
    }

}

public static class ParticipantPageFilterExtensions
{ 
	    public static ParticipantPageFilter Id(this ParticipantPageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }

    public static ParticipantPageFilter Ids(this ParticipantPageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.Ids = filter;
        return input;
    }

    public static ParticipantPageFilter EventIds(this ParticipantPageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.EventIds = filter;
        return input;
    }

    public static ParticipantPageFilter Search(this ParticipantPageFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }


    public static ParticipantPageFilter GamerTag(this ParticipantPageFilter input, string val)
    {
         input.GamerTag = val;
         return input;
    }


    public static ParticipantPageFilter Unpaid(this ParticipantPageFilter input, bool? val)
    {
         input.Unpaid = val;
         return input;
    }


    public static ParticipantPageFilter IncompleteTeam(this ParticipantPageFilter input, bool? val)
    {
         input.IncompleteTeam = val;
         return input;
    }


    public static ParticipantPageFilter MissingDeck(this ParticipantPageFilter input, bool? val)
    {
         input.MissingDeck = val;
         return input;
    }


    public static ParticipantPageFilter CheckedIn(this ParticipantPageFilter input, bool? val)
    {
         input.CheckedIn = val;
         return input;
    }


    public static ParticipantPageFilter NotCheckedIn(this ParticipantPageFilter input, bool? val)
    {
         input.NotCheckedIn = val;
         return input;
    }

}

public static class ParticipantPaginationQueryExtensions
{ 
	
    public static ParticipantPaginationQuery Page(this ParticipantPaginationQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static ParticipantPaginationQuery PerPage(this ParticipantPaginationQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static ParticipantPaginationQuery SortBy(this ParticipantPaginationQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static ParticipantPaginationQuery Filter(this ParticipantPaginationQuery input, Action<ParticipantPageFilter> mod)
    {
        var filter = new ParticipantPageFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class PhaseGroupPageQueryExtensions
{ 
	
    public static PhaseGroupPageQuery Page(this PhaseGroupPageQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static PhaseGroupPageQuery PerPage(this PhaseGroupPageQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static PhaseGroupPageQuery SortBy(this PhaseGroupPageQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static PhaseGroupPageQuery EntrantIds(this PhaseGroupPageQuery input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.EntrantIds = filter;
        return input;
    }

    public static PhaseGroupPageQuery Filter(this PhaseGroupPageQuery input, Action<PhaseGroupPageQueryFilter> mod)
    {
        var filter = new PhaseGroupPageQueryFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class PhaseGroupPageQueryFilterExtensions
{ 
	    public static PhaseGroupPageQueryFilter Id(this PhaseGroupPageQueryFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }

    public static PhaseGroupPageQueryFilter WaveId(this PhaseGroupPageQueryFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.WaveId = filter;
        return input;
    }

}

public static class PhaseGroupUpdateInputExtensions
{ 
	    public static PhaseGroupUpdateInput PhaseGroupId(this PhaseGroupUpdateInput input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.PhaseGroupId = filter;
        return input;
    }

    public static PhaseGroupUpdateInput StationId(this PhaseGroupUpdateInput input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.StationId = filter;
        return input;
    }

    public static PhaseGroupUpdateInput WaveId(this PhaseGroupUpdateInput input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.WaveId = filter;
        return input;
    }

}

public static class PhaseUpsertInputExtensions
{ 
	
    public static PhaseUpsertInput Name(this PhaseUpsertInput input, string val)
    {
         input.Name = val;
         return input;
    }


    public static PhaseUpsertInput GroupCount(this PhaseUpsertInput input, int? val)
    {
         input.GroupCount = val;
         return input;
    }


    public static PhaseUpsertInput BracketType(this PhaseUpsertInput input, BracketType? val)
    {
         input.BracketType = val;
         return input;
    }

}

public static class ResolveConflictsLockedSeedConfigExtensions
{ 
	    public static ResolveConflictsLockedSeedConfig EventId(this ResolveConflictsLockedSeedConfig input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.EventId = filter;
        return input;
    }


    public static ResolveConflictsLockedSeedConfig NumSeeds(this ResolveConflictsLockedSeedConfig input, int val)
    {
         input.NumSeeds = val;
         return input;
    }

}

public static class ResolveConflictsOptionsExtensions
{ 
	    public static ResolveConflictsOptions LockedSeeds(this ResolveConflictsOptions input, Action<List<ResolveConflictsLockedSeedConfig>> mod)
    {
        var filter = new List<ResolveConflictsLockedSeedConfig>();
        mod ??= _ => { };
        mod(filter); 
        input.LockedSeeds = filter;
        return input;
    }

}

public static class SeedPageFilterExtensions
{ 
	    public static SeedPageFilter Id(this SeedPageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }


    public static SeedPageFilter EntrantName(this SeedPageFilter input, string val)
    {
         input.EntrantName = val;
         return input;
    }


    public static SeedPageFilter CheckInState(this SeedPageFilter input, List<int?> val)
    {
         input.CheckInState = val;
         return input;
    }

    public static SeedPageFilter PhaseGroupId(this SeedPageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.PhaseGroupId = filter;
        return input;
    }

    public static SeedPageFilter EventCheckInGroupId(this SeedPageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.EventCheckInGroupId = filter;
        return input;
    }

    public static SeedPageFilter PhaseId(this SeedPageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.PhaseId = filter;
        return input;
    }

    public static SeedPageFilter EventId(this SeedPageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.EventId = filter;
        return input;
    }

    public static SeedPageFilter Search(this SeedPageFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }

}

public static class SeedPaginationQueryExtensions
{ 
	
    public static SeedPaginationQuery Page(this SeedPaginationQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static SeedPaginationQuery PerPage(this SeedPaginationQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static SeedPaginationQuery SortBy(this SeedPaginationQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static SeedPaginationQuery Filter(this SeedPaginationQuery input, Action<SeedPageFilter> mod)
    {
        var filter = new SeedPageFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class SetFilterLocationExtensions
{ 
	
    public static SetFilterLocation State(this SetFilterLocation input, string val)
    {
         input.State = val;
         return input;
    }


    public static SetFilterLocation Country(this SetFilterLocation input, string val)
    {
         input.Country = val;
         return input;
    }

    public static SetFilterLocation DistanceFrom(this SetFilterLocation input, Action<SetFilterLocationDistanceFrom> mod)
    {
        var filter = new SetFilterLocationDistanceFrom();
        mod ??= _ => { };
        mod(filter); 
        input.DistanceFrom = filter;
        return input;
    }

}

public static class SetFilterLocationDistanceFromExtensions
{ 
	    public static SetFilterLocationDistanceFrom Point(this SetFilterLocationDistanceFrom input, Action<SetFilterLocationDistanceFromPoint> mod)
    {
        var filter = new SetFilterLocationDistanceFromPoint();
        mod ??= _ => { };
        mod(filter); 
        input.Point = filter;
        return input;
    }


    public static SetFilterLocationDistanceFrom Radius(this SetFilterLocationDistanceFrom input, string val)
    {
         input.Radius = val;
         return input;
    }

}

public static class SetFilterLocationDistanceFromPointExtensions
{ 
	
    public static SetFilterLocationDistanceFromPoint Lat(this SetFilterLocationDistanceFromPoint input, double? val)
    {
         input.Lat = val;
         return input;
    }


    public static SetFilterLocationDistanceFromPoint Lon(this SetFilterLocationDistanceFromPoint input, double? val)
    {
         input.Lon = val;
         return input;
    }

}

public static class SetFiltersExtensions
{ 
	    public static SetFilters EntrantIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.EntrantIds = filter;
        return input;
    }


    public static SetFilters EntrantSize(this SetFilters input, List<int?> val)
    {
         input.EntrantSize = val;
         return input;
    }


    public static SetFilters HasVod(this SetFilters input, bool? val)
    {
         input.HasVod = val;
         return input;
    }


    public static SetFilters HideEmpty(this SetFilters input, bool? val)
    {
         input.HideEmpty = val;
         return input;
    }


    public static SetFilters ShowByes(this SetFilters input, bool? val)
    {
         input.ShowByes = val;
         return input;
    }


    public static SetFilters IsEventOnline(this SetFilters input, bool? val)
    {
         input.IsEventOnline = val;
         return input;
    }

    public static SetFilters Location(this SetFilters input, Action<SetFilterLocation> mod)
    {
        var filter = new SetFilterLocation();
        mod ??= _ => { };
        mod(filter); 
        input.Location = filter;
        return input;
    }

    public static SetFilters ParticipantIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.ParticipantIds = filter;
        return input;
    }

    public static SetFilters PhaseGroupIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.PhaseGroupIds = filter;
        return input;
    }

    public static SetFilters PhaseIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.PhaseIds = filter;
        return input;
    }

    public static SetFilters EventIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.EventIds = filter;
        return input;
    }

    public static SetFilters TournamentIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.TournamentIds = filter;
        return input;
    }

    public static SetFilters PlayerIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.PlayerIds = filter;
        return input;
    }


    public static SetFilters RoundNumber(this SetFilters input, int? val)
    {
         input.RoundNumber = val;
         return input;
    }


    public static SetFilters State(this SetFilters input, List<int?> val)
    {
         input.State = val;
         return input;
    }

    public static SetFilters StationIds(this SetFilters input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.StationIds = filter;
        return input;
    }


    public static SetFilters StationNumbers(this SetFilters input, List<int?> val)
    {
         input.StationNumbers = val;
         return input;
    }

    public static SetFilters UpdatedAfter(this SetFilters input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.UpdatedAfter = filter;
        return input;
    }

}

public static class ShopLevelsQueryExtensions
{ 
	
    public static ShopLevelsQuery Page(this ShopLevelsQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static ShopLevelsQuery PerPage(this ShopLevelsQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static ShopLevelsQuery SortBy(this ShopLevelsQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

}

public static class ShopOrderMessagesQueryExtensions
{ 
	
    public static ShopOrderMessagesQuery Page(this ShopOrderMessagesQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static ShopOrderMessagesQuery PerPage(this ShopOrderMessagesQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static ShopOrderMessagesQuery SortBy(this ShopOrderMessagesQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

}

public static class StandingGroupStandingPageFilterExtensions
{ 
	
    public static StandingGroupStandingPageFilter Page(this StandingGroupStandingPageFilter input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static StandingGroupStandingPageFilter PerPage(this StandingGroupStandingPageFilter input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static StandingGroupStandingPageFilter SortBy(this StandingGroupStandingPageFilter input, string val)
    {
         input.SortBy = val;
         return input;
    }

}

public static class StandingPageFilterExtensions
{ 
	    public static StandingPageFilter Id(this StandingPageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }

    public static StandingPageFilter Ids(this StandingPageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.Ids = filter;
        return input;
    }

    public static StandingPageFilter Search(this StandingPageFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }

}

public static class StandingPaginationQueryExtensions
{ 
	
    public static StandingPaginationQuery Page(this StandingPaginationQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static StandingPaginationQuery PerPage(this StandingPaginationQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static StandingPaginationQuery SortBy(this StandingPaginationQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static StandingPaginationQuery Filter(this StandingPaginationQuery input, Action<StandingPageFilter> mod)
    {
        var filter = new StandingPageFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class StationFilterExtensions
{ 
	
    public static StationFilter Page(this StationFilter input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static StationFilter PerPage(this StationFilter input, int? val)
    {
         input.PerPage = val;
         return input;
    }

}

public static class StationUpsertInputExtensions
{ 
	
    public static StationUpsertInput Number(this StationUpsertInput input, int val)
    {
         input.Number = val;
         return input;
    }

    public static StationUpsertInput ClusterId(this StationUpsertInput input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.ClusterId = filter;
        return input;
    }

}

public static class TeamPaginationFilterExtensions
{ 
	    public static TeamPaginationFilter GlobalTeamId(this TeamPaginationFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.GlobalTeamId = filter;
        return input;
    }


    public static TeamPaginationFilter EventState(this TeamPaginationFilter input, ActivityState? val)
    {
         input.EventState = val;
         return input;
    }

    public static TeamPaginationFilter EventId(this TeamPaginationFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.EventId = filter;
        return input;
    }

    public static TeamPaginationFilter EventIds(this TeamPaginationFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.EventIds = filter;
        return input;
    }


    public static TeamPaginationFilter MinEntrantCount(this TeamPaginationFilter input, int? val)
    {
         input.MinEntrantCount = val;
         return input;
    }


    public static TeamPaginationFilter MaxEntrantCount(this TeamPaginationFilter input, int? val)
    {
         input.MaxEntrantCount = val;
         return input;
    }

    public static TeamPaginationFilter Search(this TeamPaginationFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }


    public static TeamPaginationFilter Type(this TeamPaginationFilter input, int? val)
    {
         input.Type = val;
         return input;
    }

    public static TeamPaginationFilter TournamentId(this TeamPaginationFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.TournamentId = filter;
        return input;
    }


    public static TeamPaginationFilter MemberStatus(this TeamPaginationFilter input, List<TeamMemberStatus?> val)
    {
         input.MemberStatus = val;
         return input;
    }

    public static TeamPaginationFilter VideogameId(this TeamPaginationFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.VideogameId = filter;
        return input;
    }


    public static TeamPaginationFilter IsLeague(this TeamPaginationFilter input, bool? val)
    {
         input.IsLeague = val;
         return input;
    }


    public static TeamPaginationFilter Upcoming(this TeamPaginationFilter input, bool? val)
    {
         input.Upcoming = val;
         return input;
    }


    public static TeamPaginationFilter Past(this TeamPaginationFilter input, bool? val)
    {
         input.Past = val;
         return input;
    }


    public static TeamPaginationFilter RosterComplete(this TeamPaginationFilter input, bool? val)
    {
         input.RosterComplete = val;
         return input;
    }


    public static TeamPaginationFilter RosterIncomplete(this TeamPaginationFilter input, bool? val)
    {
         input.RosterIncomplete = val;
         return input;
    }

}

public static class TeamPaginationQueryExtensions
{ 
	
    public static TeamPaginationQuery Page(this TeamPaginationQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static TeamPaginationQuery PerPage(this TeamPaginationQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static TeamPaginationQuery SortBy(this TeamPaginationQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static TeamPaginationQuery Filter(this TeamPaginationQuery input, Action<TeamPaginationFilter> mod)
    {
        var filter = new TeamPaginationFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class TopGameFilterExtensions
{ 
	
    public static TopGameFilter GameNums(this TopGameFilter input, List<int?> val)
    {
         input.GameNums = val;
         return input;
    }

}

public static class TournamentLocationFilterExtensions
{ 
	
    public static TournamentLocationFilter DistanceFrom(this TournamentLocationFilter input, string val)
    {
         input.DistanceFrom = val;
         return input;
    }


    public static TournamentLocationFilter Distance(this TournamentLocationFilter input, string val)
    {
         input.Distance = val;
         return input;
    }

}

public static class TournamentPageFilterExtensions
{ 
	    public static TournamentPageFilter Id(this TournamentPageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }

    public static TournamentPageFilter Ids(this TournamentPageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.Ids = filter;
        return input;
    }

    public static TournamentPageFilter OwnerId(this TournamentPageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.OwnerId = filter;
        return input;
    }


    public static TournamentPageFilter IsCurrentUserAdmin(this TournamentPageFilter input, bool? val)
    {
         input.IsCurrentUserAdmin = val;
         return input;
    }


    public static TournamentPageFilter CountryCode(this TournamentPageFilter input, string val)
    {
         input.CountryCode = val;
         return input;
    }


    public static TournamentPageFilter AddrState(this TournamentPageFilter input, string val)
    {
         input.AddrState = val;
         return input;
    }

    public static TournamentPageFilter Location(this TournamentPageFilter input, Action<TournamentLocationFilter> mod)
    {
        var filter = new TournamentLocationFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Location = filter;
        return input;
    }

    public static TournamentPageFilter AfterDate(this TournamentPageFilter input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.AfterDate = filter;
        return input;
    }

    public static TournamentPageFilter BeforeDate(this TournamentPageFilter input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.BeforeDate = filter;
        return input;
    }

    public static TournamentPageFilter ComputedUpdatedAt(this TournamentPageFilter input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.ComputedUpdatedAt = filter;
        return input;
    }


    public static TournamentPageFilter Name(this TournamentPageFilter input, string val)
    {
         input.Name = val;
         return input;
    }


    public static TournamentPageFilter VenueName(this TournamentPageFilter input, string val)
    {
         input.VenueName = val;
         return input;
    }


    public static TournamentPageFilter IsFeatured(this TournamentPageFilter input, bool? val)
    {
         input.IsFeatured = val;
         return input;
    }


    public static TournamentPageFilter IsLeague(this TournamentPageFilter input, bool? val)
    {
         input.IsLeague = val;
         return input;
    }


    public static TournamentPageFilter HasBannerImages(this TournamentPageFilter input, bool? val)
    {
         input.HasBannerImages = val;
         return input;
    }


    public static TournamentPageFilter ActiveShops(this TournamentPageFilter input, bool? val)
    {
         input.ActiveShops = val;
         return input;
    }


    public static TournamentPageFilter RegOpen(this TournamentPageFilter input, bool? val)
    {
         input.RegOpen = val;
         return input;
    }


    public static TournamentPageFilter Past(this TournamentPageFilter input, bool? val)
    {
         input.Past = val;
         return input;
    }


    public static TournamentPageFilter Published(this TournamentPageFilter input, bool? val)
    {
         input.Published = val;
         return input;
    }


    public static TournamentPageFilter PubliclySearchable(this TournamentPageFilter input, bool? val)
    {
         input.PubliclySearchable = val;
         return input;
    }


    public static TournamentPageFilter StaffPicks(this TournamentPageFilter input, bool? val)
    {
         input.StaffPicks = val;
         return input;
    }


    public static TournamentPageFilter HasOnlineEvents(this TournamentPageFilter input, bool? val)
    {
         input.HasOnlineEvents = val;
         return input;
    }

    public static TournamentPageFilter TopGames(this TournamentPageFilter input, Action<TopGameFilter> mod)
    {
        var filter = new TopGameFilter();
        mod ??= _ => { };
        mod(filter); 
        input.TopGames = filter;
        return input;
    }


    public static TournamentPageFilter Upcoming(this TournamentPageFilter input, bool? val)
    {
         input.Upcoming = val;
         return input;
    }

    public static TournamentPageFilter VideogameIds(this TournamentPageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.VideogameIds = filter;
        return input;
    }


    public static TournamentPageFilter SortByScore(this TournamentPageFilter input, bool? val)
    {
         input.SortByScore = val;
         return input;
    }

}

public static class TournamentQueryExtensions
{ 
	
    public static TournamentQuery Page(this TournamentQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static TournamentQuery PerPage(this TournamentQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static TournamentQuery SortBy(this TournamentQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static TournamentQuery Filter(this TournamentQuery input, Action<TournamentPageFilter> mod)
    {
        var filter = new TournamentPageFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }


    public static TournamentQuery Sort(this TournamentQuery input, TournamentPaginationSort? val)
    {
         input.Sort = val;
         return input;
    }

}

public static class TournamentRegistrationInputExtensions
{ 
	    public static TournamentRegistrationInput EventIds(this TournamentRegistrationInput input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.EventIds = filter;
        return input;
    }

}

public static class UpdatePhaseSeedInfoExtensions
{ 
	    public static UpdatePhaseSeedInfo SeedId(this UpdatePhaseSeedInfo input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.SeedId = filter;
        return input;
    }

    public static UpdatePhaseSeedInfo SeedNum(this UpdatePhaseSeedInfo input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.SeedNum = filter;
        return input;
    }

    public static UpdatePhaseSeedInfo PhaseGroupId(this UpdatePhaseSeedInfo input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.PhaseGroupId = filter;
        return input;
    }

}

public static class UpdatePhaseSeedingOptionsExtensions
{ 
	
    public static UpdatePhaseSeedingOptions StrictMode(this UpdatePhaseSeedingOptions input, bool? val)
    {
         input.StrictMode = val;
         return input;
    }

}

public static class UserEventsPaginationFilterExtensions
{ 
	    public static UserEventsPaginationFilter VideogameId(this UserEventsPaginationFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.VideogameId = filter;
        return input;
    }


    public static UserEventsPaginationFilter EventType(this UserEventsPaginationFilter input, int? val)
    {
         input.EventType = val;
         return input;
    }


    public static UserEventsPaginationFilter MinEntrantCount(this UserEventsPaginationFilter input, int? val)
    {
         input.MinEntrantCount = val;
         return input;
    }


    public static UserEventsPaginationFilter MaxEntrantCount(this UserEventsPaginationFilter input, int? val)
    {
         input.MaxEntrantCount = val;
         return input;
    }

    public static UserEventsPaginationFilter Location(this UserEventsPaginationFilter input, Action<LocationFilterType> mod)
    {
        var filter = new LocationFilterType();
        mod ??= _ => { };
        mod(filter); 
        input.Location = filter;
        return input;
    }

    public static UserEventsPaginationFilter Search(this UserEventsPaginationFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }

}

public static class UserEventsPaginationQueryExtensions
{ 
	
    public static UserEventsPaginationQuery Page(this UserEventsPaginationQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static UserEventsPaginationQuery PerPage(this UserEventsPaginationQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static UserEventsPaginationQuery SortBy(this UserEventsPaginationQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static UserEventsPaginationQuery Filter(this UserEventsPaginationQuery input, Action<UserEventsPaginationFilter> mod)
    {
        var filter = new UserEventsPaginationFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class UserLeaguesPaginationFilterExtensions
{ 
	    public static UserLeaguesPaginationFilter VideogameId(this UserLeaguesPaginationFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.VideogameId = filter;
        return input;
    }


    public static UserLeaguesPaginationFilter Upcoming(this UserLeaguesPaginationFilter input, bool? val)
    {
         input.Upcoming = val;
         return input;
    }


    public static UserLeaguesPaginationFilter Past(this UserLeaguesPaginationFilter input, bool? val)
    {
         input.Past = val;
         return input;
    }

    public static UserLeaguesPaginationFilter Search(this UserLeaguesPaginationFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }

}

public static class UserLeaguesPaginationQueryExtensions
{ 
	
    public static UserLeaguesPaginationQuery Page(this UserLeaguesPaginationQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static UserLeaguesPaginationQuery PerPage(this UserLeaguesPaginationQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static UserLeaguesPaginationQuery SortBy(this UserLeaguesPaginationQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static UserLeaguesPaginationQuery Filter(this UserLeaguesPaginationQuery input, Action<UserLeaguesPaginationFilter> mod)
    {
        var filter = new UserLeaguesPaginationFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class UserTournamentsPaginationFilterExtensions
{ 
	
    public static UserTournamentsPaginationFilter Past(this UserTournamentsPaginationFilter input, bool? val)
    {
         input.Past = val;
         return input;
    }


    public static UserTournamentsPaginationFilter Upcoming(this UserTournamentsPaginationFilter input, bool? val)
    {
         input.Upcoming = val;
         return input;
    }

    public static UserTournamentsPaginationFilter Search(this UserTournamentsPaginationFilter input, Action<PaginationSearchType> mod)
    {
        var filter = new PaginationSearchType();
        mod ??= _ => { };
        mod(filter); 
        input.Search = filter;
        return input;
    }

    public static UserTournamentsPaginationFilter VideogameId(this UserTournamentsPaginationFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.VideogameId = filter;
        return input;
    }


    public static UserTournamentsPaginationFilter TournamentView(this UserTournamentsPaginationFilter input, string val)
    {
         input.TournamentView = val;
         return input;
    }

    public static UserTournamentsPaginationFilter ExcludeId(this UserTournamentsPaginationFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.ExcludeId = filter;
        return input;
    }

}

public static class UserTournamentsPaginationQueryExtensions
{ 
	
    public static UserTournamentsPaginationQuery Page(this UserTournamentsPaginationQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static UserTournamentsPaginationQuery PerPage(this UserTournamentsPaginationQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static UserTournamentsPaginationQuery SortBy(this UserTournamentsPaginationQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static UserTournamentsPaginationQuery Filter(this UserTournamentsPaginationQuery input, Action<UserTournamentsPaginationFilter> mod)
    {
        var filter = new UserTournamentsPaginationFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class VideogamePageFilterExtensions
{ 
	    public static VideogamePageFilter Id(this VideogamePageFilter input, Action<List<ID>> mod)
    {
        var filter = new List<ID>();
        mod ??= _ => { };
        mod(filter); 
        input.Id = filter;
        return input;
    }


    public static VideogamePageFilter Name(this VideogamePageFilter input, string val)
    {
         input.Name = val;
         return input;
    }

    public static VideogamePageFilter ForUser(this VideogamePageFilter input, Action<ID> mod)
    {
        var filter = new ID();
        mod ??= _ => { };
        mod(filter); 
        input.ForUser = filter;
        return input;
    }

}

public static class VideogameQueryExtensions
{ 
	
    public static VideogameQuery Page(this VideogameQuery input, int? val)
    {
         input.Page = val;
         return input;
    }


    public static VideogameQuery PerPage(this VideogameQuery input, int? val)
    {
         input.PerPage = val;
         return input;
    }


    public static VideogameQuery SortBy(this VideogameQuery input, string val)
    {
         input.SortBy = val;
         return input;
    }

    public static VideogameQuery Filter(this VideogameQuery input, Action<VideogamePageFilter> mod)
    {
        var filter = new VideogamePageFilter();
        mod ??= _ => { };
        mod(filter); 
        input.Filter = filter;
        return input;
    }

}

public static class WaveUpsertInputExtensions
{ 
	
    public static WaveUpsertInput Identifier(this WaveUpsertInput input, string val)
    {
         input.Identifier = val;
         return input;
    }

    public static WaveUpsertInput StartAt(this WaveUpsertInput input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.StartAt = filter;
        return input;
    }

    public static WaveUpsertInput EndAt(this WaveUpsertInput input, Action<Timestamp> mod)
    {
        var filter = new Timestamp();
        mod ??= _ => { };
        mod(filter); 
        input.EndAt = filter;
        return input;
    }

}
