//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace StartGG.Client;


public static class GlobalTeamExtensions
{
    [GraphQLMember("eventTeams")]
    public static EventTeamConnection EventTeams(this GlobalTeam  globalTeam, [GraphQLArgument("query", "TeamPaginationQuery")] TeamPaginationQuery query = null)
    {
        return globalTeam.GetMethodValue<EventTeamConnection>("eventTeams", query);
    }

    [GraphQLMember("images")]
    public static List<Image> Images(this GlobalTeam  globalTeam, [GraphQLArgument("type", "String")] string type = null)
    {
        return globalTeam.GetMethodValue<List<Image>>("images", type);
    }

    [GraphQLMember("leagueTeams")]
    public static EventTeamConnection LeagueTeams(this GlobalTeam  globalTeam, [GraphQLArgument("query", "TeamPaginationQuery")] TeamPaginationQuery query = null)
    {
        return globalTeam.GetMethodValue<EventTeamConnection>("leagueTeams", query);
    }

    [GraphQLMember("members")]
    public static List<TeamMember> Members(this GlobalTeam  globalTeam, [GraphQLArgument("status", "[TeamMemberStatus]")] List<TeamMemberStatus?> status = null)
    {
        return globalTeam.GetMethodValue<List<TeamMember>>("members", status);
    }

}

/// <summary>
/// Global Team
/// </summary>
public partial class GlobalTeam : GraphQLTypeBase, Team
{
    [GraphQLMember("id")]
    [JsonPropertyName("id")]
    public ID Id { get; set; }

    /// <summary>
    /// Uniquely identifying token for team. Same as the hashed part of the slug
    /// </summary>
    [GraphQLMember("discriminator")]
    [JsonPropertyName("discriminator")]
    public string Discriminator { get; set; }

    private LazyProperty<EventTeamConnection> _eventTeams = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public EventTeamConnection EventTeams => _eventTeams.Value(() => GetFirstMethodValue<EventTeamConnection>("eventTeams"));

    private LazyProperty<List<Image>> _images = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<Image> Images => _images.Value(() => GetFirstMethodValue<List<Image>>("images"));

    private LazyProperty<EventTeamConnection> _leagueTeams = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public EventTeamConnection LeagueTeams => _leagueTeams.Value(() => GetFirstMethodValue<EventTeamConnection>("leagueTeams"));

    private LazyProperty<List<TeamMember>> _members = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<TeamMember> Members => _members.Value(() => GetFirstMethodValue<List<TeamMember>>("members"));

    [GraphQLMember("name")]
    [JsonPropertyName("name")]
    public string Name { get; set; }

    [GraphQLMember("__typename")]
    [JsonPropertyName("__typename")]
    public string __TypeName { get; set; }
}
