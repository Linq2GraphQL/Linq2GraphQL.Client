//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace StartGG.Client;


public static class PlayerExtensions
{
    [GraphQLMember("rankings")]
    public static List<PlayerRank> Rankings(this Player  player, [GraphQLArgument("limit", "Int")] int? limit = null, [GraphQLArgument("videogameId", "ID")] ID videogameId = null)
    {
        return player.GetMethodValue<List<PlayerRank>>("rankings", limit, videogameId);
    }

    [GraphQLMember("recentStandings")]
    public static List<Standing> RecentStandings(this Player  player, [GraphQLArgument("videogameId", "ID")] ID videogameId = null, [GraphQLArgument("limit", "Int")] int? limit = null)
    {
        return player.GetMethodValue<List<Standing>>("recentStandings", videogameId, limit);
    }

    [GraphQLMember("sets")]
    public static SetConnection Sets(this Player  player, [GraphQLArgument("page", "Int")] int? page = null, [GraphQLArgument("perPage", "Int")] int? perPage = null, [GraphQLArgument("filters", "SetFilters")] SetFilters filters = null)
    {
        return player.GetMethodValue<SetConnection>("sets", page, perPage, filters);
    }

}

/// <summary>
/// A player
/// </summary>
public partial class Player : GraphQLTypeBase
{
    [GraphQLMember("id")]
    [JsonPropertyName("id")]
    public ID Id { get; set; }

    [GraphQLMember("gamerTag")]
    [JsonPropertyName("gamerTag")]
    public string GamerTag { get; set; }

    [GraphQLMember("prefix")]
    [JsonPropertyName("prefix")]
    public string Prefix { get; set; }

    private LazyProperty<List<PlayerRank>> _rankings = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<PlayerRank> Rankings => _rankings.Value(() => GetFirstMethodValue<List<PlayerRank>>("rankings"));

    private LazyProperty<List<Standing>> _recentStandings = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<Standing> RecentStandings => _recentStandings.Value(() => GetFirstMethodValue<List<Standing>>("recentStandings"));

    private LazyProperty<SetConnection> _sets = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public SetConnection Sets => _sets.Value(() => GetFirstMethodValue<SetConnection>("sets"));

    [GraphQLMember("user")]
    [JsonPropertyName("user")]
    public User User { get; set; }

}
