//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace StartGG.Client;


public static class ParticipantExtensions
{
    [GraphQLMember("images")]
    public static List<Image> Images(this Participant  participant, [GraphQLArgument("type", "String")] string type = null)
    {
        return participant.GetMethodValue<List<Image>>("images", type);
    }

}

/// <summary>
/// A participant of a tournament; either a spectator or competitor
/// </summary>
public partial class Participant : GraphQLTypeBase
{
    [GraphQLMember("id")]
    [JsonPropertyName("id")]
    public ID Id { get; set; }

    /// <summary>
    /// If this participant was checked-in by admin
    /// </summary>
    [GraphQLMember("checkedIn")]
    [JsonPropertyName("checkedIn")]
    public bool? CheckedIn { get; set; }

    /// <summary>
    /// The time this participant was checked-in by admin
    /// </summary>
    [GraphQLMember("checkedInAt")]
    [JsonPropertyName("checkedInAt")]
    public Timestamp CheckedInAt { get; set; }

    /// <summary>
    /// Info for connected accounts to external services.
    /// </summary>
    [GraphQLMember("connectedAccounts")]
    [JsonPropertyName("connectedAccounts")]
    public JSON ConnectedAccounts { get; set; }

    /// <summary>
    /// Contact Info selected during registration. Falls back to User.location and/or
/// User.name if necessary. These fields are for admin use only. If you are not a
/// tournament admin or the participant being queried, these fields will be null.
/// Do not display this information publicly.
    /// </summary>
    [GraphQLMember("contactInfo")]
    [JsonPropertyName("contactInfo")]
    public ContactInfo ContactInfo { get; set; }

    /// <summary>
    /// Email of the user, only available to admins within 18 months of tournament completion for tournament administrators.
    /// </summary>
    [GraphQLMember("email")]
    [JsonPropertyName("email")]
    public string Email { get; set; }

    /// <summary>
    /// Entrants associated with this Participant, if applicable
    /// </summary>
    [GraphQLMember("entrants")]
    [JsonPropertyName("entrants")]
    public List<Entrant> Entrants { get; set; }

    /// <summary>
    /// The events this participant registered for within a Tournament.
    /// </summary>
    [GraphQLMember("events")]
    [JsonPropertyName("events")]
    public List<Event> Events { get; set; }

    /// <summary>
    /// The tag that was used when the participant registered, e.g. Mang0
    /// </summary>
    [GraphQLMember("gamerTag")]
    [JsonPropertyName("gamerTag")]
    public string GamerTag { get; set; }

    private LazyProperty<List<Image>> _images = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<Image> Images => _images.Value(() => GetFirstMethodValue<List<Image>>("images"));

    [GraphQLMember("player")]
    [JsonPropertyName("player")]
    public Player Player { get; set; }

    /// <summary>
    /// The prefix that the user set for this Tournament, e.g. C9
    /// </summary>
    [GraphQLMember("prefix")]
    [JsonPropertyName("prefix")]
    public string Prefix { get; set; }

    /// <summary>
    /// Tournament Admin viewable field. Shows details for required social connections
    /// </summary>
    [GraphQLMember("requiredConnections")]
    [JsonPropertyName("requiredConnections")]
    public List<ProfileAuthorization> RequiredConnections { get; set; }

    /// <summary>
    /// The user this participant is associated to.
    /// </summary>
    [GraphQLMember("user")]
    [JsonPropertyName("user")]
    public User User { get; set; }

    /// <summary>
    /// If this participant is verified as actually being in the tournament
    /// </summary>
    [GraphQLMember("verified")]
    [JsonPropertyName("verified")]
    public bool? Verified { get; set; }

}
