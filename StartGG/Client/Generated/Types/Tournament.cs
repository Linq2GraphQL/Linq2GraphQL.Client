//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace StartGG.Client;


public static class TournamentExtensions
{
    [GraphQLMember("admins")]
    public static List<User> Admins(this Tournament  tournament, [GraphQLArgument("roles", "[String]")] List<string> roles = null)
    {
        return tournament.GetMethodValue<List<User>>("admins", roles);
    }

    [GraphQLMember("events")]
    public static List<Event> Events(this Tournament  tournament, [GraphQLArgument("limit", "Int")] int? limit = null, [GraphQLArgument("filter", "EventFilter")] EventFilter filter = null)
    {
        return tournament.GetMethodValue<List<Event>>("events", limit, filter);
    }

    [GraphQLMember("images")]
    public static List<Image> Images(this Tournament  tournament, [GraphQLArgument("type", "String")] string type = null)
    {
        return tournament.GetMethodValue<List<Image>>("images", type);
    }

    [GraphQLMember("participants")]
    public static ParticipantConnection Participants(this Tournament  tournament, [GraphQLArgument("query", "ParticipantPaginationQuery!")] ParticipantPaginationQuery query, [GraphQLArgument("isAdmin", "Boolean")] bool? isAdmin = null)
    {
        return tournament.GetMethodValue<ParticipantConnection>("participants", query, isAdmin);
    }

    [GraphQLMember("stations")]
    public static StationsConnection Stations(this Tournament  tournament, [GraphQLArgument("page", "Int")] int? page = null, [GraphQLArgument("perPage", "Int")] int? perPage = null)
    {
        return tournament.GetMethodValue<StationsConnection>("stations", page, perPage);
    }

    [GraphQLMember("teams")]
    public static TeamConnection Teams(this Tournament  tournament, [GraphQLArgument("query", "TeamPaginationQuery!")] TeamPaginationQuery query)
    {
        return tournament.GetMethodValue<TeamConnection>("teams", query);
    }

    [GraphQLMember("url")]
    public static string Url(this Tournament  tournament, [GraphQLArgument("tab", "String")] string tab = null, [GraphQLArgument("relative", "Boolean")] bool? relative = null)
    {
        return tournament.GetMethodValue<string>("url", tab, relative);
    }

}

/// <summary>
/// A tournament
/// </summary>
public partial class Tournament : GraphQLTypeBase
{
    [GraphQLMember("id")]
    [JsonPropertyName("id")]
    public ID Id { get; set; }

    [GraphQLMember("addrState")]
    [JsonPropertyName("addrState")]
    public string AddrState { get; set; }

    private LazyProperty<List<User>> _admins = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<User> Admins => _admins.Value(() => GetFirstMethodValue<List<User>>("admins"));

    [GraphQLMember("city")]
    [JsonPropertyName("city")]
    public string City { get; set; }

    [GraphQLMember("countryCode")]
    [JsonPropertyName("countryCode")]
    public string CountryCode { get; set; }

    /// <summary>
    /// When the tournament was created (unix timestamp)
    /// </summary>
    [GraphQLMember("createdAt")]
    [JsonPropertyName("createdAt")]
    public Timestamp CreatedAt { get; set; }

    [GraphQLMember("currency")]
    [JsonPropertyName("currency")]
    public string Currency { get; set; }

    /// <summary>
    /// When the tournament ends
    /// </summary>
    [GraphQLMember("endAt")]
    [JsonPropertyName("endAt")]
    public Timestamp EndAt { get; set; }

    /// <summary>
    /// When does event registration close
    /// </summary>
    [GraphQLMember("eventRegistrationClosesAt")]
    [JsonPropertyName("eventRegistrationClosesAt")]
    public Timestamp EventRegistrationClosesAt { get; set; }

    private LazyProperty<List<Event>> _events = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<Event> Events => _events.Value(() => GetFirstMethodValue<List<Event>>("events"));

    /// <summary>
    /// True if tournament has at least one offline event
    /// </summary>
    [GraphQLMember("hasOfflineEvents")]
    [JsonPropertyName("hasOfflineEvents")]
    public bool? HasOfflineEvents { get; set; }

    [GraphQLMember("hasOnlineEvents")]
    [JsonPropertyName("hasOnlineEvents")]
    public bool? HasOnlineEvents { get; set; }

    [GraphQLMember("hashtag")]
    [JsonPropertyName("hashtag")]
    public string Hashtag { get; set; }

    private LazyProperty<List<Image>> _images = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public List<Image> Images => _images.Value(() => GetFirstMethodValue<List<Image>>("images"));

    /// <summary>
    /// True if tournament has at least one online event
    /// </summary>
    [GraphQLMember("isOnline")]
    [JsonPropertyName("isOnline")]
    public bool? IsOnline { get; set; }

    /// <summary>
    /// Is tournament registration open
    /// </summary>
    [GraphQLMember("isRegistrationOpen")]
    [JsonPropertyName("isRegistrationOpen")]
    public bool? IsRegistrationOpen { get; set; }

    [GraphQLMember("lat")]
    [JsonPropertyName("lat")]
    public double? Lat { get; set; }

    [GraphQLMember("links")]
    [JsonPropertyName("links")]
    public TournamentLinks Links { get; set; }

    [GraphQLMember("lng")]
    [JsonPropertyName("lng")]
    public double? Lng { get; set; }

    [GraphQLMember("mapsPlaceId")]
    [JsonPropertyName("mapsPlaceId")]
    public string MapsPlaceId { get; set; }

    /// <summary>
    /// The tournament name
    /// </summary>
    [GraphQLMember("name")]
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// Number of attendees including spectators, if public
    /// </summary>
    [GraphQLMember("numAttendees")]
    [JsonPropertyName("numAttendees")]
    public int? NumAttendees { get; set; }

    /// <summary>
    /// The user who created the tournament
    /// </summary>
    [GraphQLMember("owner")]
    [JsonPropertyName("owner")]
    public User Owner { get; set; }

    private LazyProperty<ParticipantConnection> _participants = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public ParticipantConnection Participants => _participants.Value(() => GetFirstMethodValue<ParticipantConnection>("participants"));

    [GraphQLMember("postalCode")]
    [JsonPropertyName("postalCode")]
    public string PostalCode { get; set; }

    [GraphQLMember("primaryContact")]
    [JsonPropertyName("primaryContact")]
    public string PrimaryContact { get; set; }

    [GraphQLMember("primaryContactType")]
    [JsonPropertyName("primaryContactType")]
    public string PrimaryContactType { get; set; }

    /// <summary>
    /// Publishing settings for this tournament
    /// </summary>
    [GraphQLMember("publishing")]
    [JsonPropertyName("publishing")]
    public JSON Publishing { get; set; }

    /// <summary>
    /// When does registration for the tournament end
    /// </summary>
    [GraphQLMember("registrationClosesAt")]
    [JsonPropertyName("registrationClosesAt")]
    public Timestamp RegistrationClosesAt { get; set; }

    [GraphQLMember("rules")]
    [JsonPropertyName("rules")]
    public string Rules { get; set; }

    /// <summary>
    /// The short slug used to form the url
    /// </summary>
    [GraphQLMember("shortSlug")]
    [JsonPropertyName("shortSlug")]
    public string ShortSlug { get; set; }

    /// <summary>
    /// The slug used to form the url
    /// </summary>
    [GraphQLMember("slug")]
    [JsonPropertyName("slug")]
    public string Slug { get; set; }

    /// <summary>
    /// When the tournament Starts
    /// </summary>
    [GraphQLMember("startAt")]
    [JsonPropertyName("startAt")]
    public Timestamp StartAt { get; set; }

    /// <summary>
    /// State of the tournament, can be ActivityState::CREATED, ActivityState::ACTIVE, or ActivityState::COMPLETED
    /// </summary>
    [GraphQLMember("state")]
    [JsonPropertyName("state")]
    public int? State { get; set; }

    private LazyProperty<StationsConnection> _stations = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public StationsConnection Stations => _stations.Value(() => GetFirstMethodValue<StationsConnection>("stations"));

    [GraphQLMember("streamQueue")]
    [JsonPropertyName("streamQueue")]
    public List<StreamQueue> StreamQueue { get; set; }

    [GraphQLMember("streams")]
    [JsonPropertyName("streams")]
    public List<Streams> Streams { get; set; }

    /// <summary>
    /// When is the team creation deadline
    /// </summary>
    [GraphQLMember("teamCreationClosesAt")]
    [JsonPropertyName("teamCreationClosesAt")]
    public Timestamp TeamCreationClosesAt { get; set; }

    private LazyProperty<TeamConnection> _teams = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public TeamConnection Teams => _teams.Value(() => GetFirstMethodValue<TeamConnection>("teams"));

    /// <summary>
    /// The timezone of the tournament
    /// </summary>
    [GraphQLMember("timezone")]
    [JsonPropertyName("timezone")]
    public string Timezone { get; set; }

    /// <summary>
    /// The type of tournament from TournamentType
    /// </summary>
    [GraphQLMember("tournamentType")]
    [JsonPropertyName("tournamentType")]
    public int? TournamentType { get; set; }

    /// <summary>
    /// When the tournament was last modified (unix timestamp)
    /// </summary>
    [GraphQLMember("updatedAt")]
    [JsonPropertyName("updatedAt")]
    public Timestamp UpdatedAt { get; set; }

    private LazyProperty<string> _url = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public string Url => _url.Value(() => GetFirstMethodValue<string>("url"));

    [GraphQLMember("venueAddress")]
    [JsonPropertyName("venueAddress")]
    public string VenueAddress { get; set; }

    [GraphQLMember("venueName")]
    [JsonPropertyName("venueName")]
    public string VenueName { get; set; }

    /// <summary>
    /// List of all waves in this tournament
    /// </summary>
    [GraphQLMember("waves")]
    [JsonPropertyName("waves")]
    public List<Wave> Waves { get; set; }

}
