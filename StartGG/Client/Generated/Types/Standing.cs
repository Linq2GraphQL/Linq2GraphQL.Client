//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace StartGG.Client;


/// <summary>
/// A standing indicates the placement of something within a container.
/// </summary>
public partial class Standing : GraphQLTypeBase
{
    [GraphQLMember("id")]
    [JsonPropertyName("id")]
    public ID Id { get; set; }

    /// <summary>
    /// The containing entity that contextualizes this standing. Event standings, for
/// example, represent an entrant's standing in the entire event vs. Set standings
/// which is an entrant's standing in only a single set within an event.
    /// </summary>
    [GraphQLMember("container")]
    [JsonPropertyName("container")]
    public StandingContainer Container { get; set; }

    /// <summary>
    /// If the entity this standing is assigned to can be resolved into an entrant, this will provide the entrant.
    /// </summary>
    [GraphQLMember("entrant")]
    [JsonPropertyName("entrant")]
    public Entrant Entrant { get; set; }

    [GraphQLMember("isFinal")]
    [JsonPropertyName("isFinal")]
    public bool? IsFinal { get; set; }

    /// <summary>
    /// Metadata that goes along with this standing. Can take on different forms based on standing group type and settings.
    /// </summary>
    [GraphQLMember("metadata")]
    [JsonPropertyName("metadata")]
    public JSON Metadata { get; set; }

    [GraphQLMember("placement")]
    [JsonPropertyName("placement")]
    public int? Placement { get; set; }

    /// <summary>
    /// The player(s) tied to this standing's entity
    /// </summary>
    [GraphQLMember("player")]
    [JsonPropertyName("player")]
    public Player Player { get; set; }

    [GraphQLMember("stats")]
    [JsonPropertyName("stats")]
    public StandingStats Stats { get; set; }

    [GraphQLMember("totalPoints")]
    [JsonPropertyName("totalPoints")]
    public double? TotalPoints { get; set; }

}
