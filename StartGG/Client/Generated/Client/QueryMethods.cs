//---------------------------------------------------------------------
// This code was automatically generated by Linq2GraphQL
// Please don't edit this file
// Github:https://github.com/linq2graphql/linq2graphql.client
// Url: https://linq2graphql.com
//---------------------------------------------------------------------

using System.Collections.Generic;
using System;
using Linq2GraphQL.Client;

namespace StartGG.Client;

public class QueryMethods
{
    private readonly GraphClient client;

    public QueryMethods(GraphClient client)
    {
        this.client = client;
    }

    public GraphQuery<User> CurrentUser()
    {
	    var arguments = new List<ArgumentValue>
        {
        };

        return new GraphQuery<User>(client,  "currentUser", OperationType.Query, arguments); 
    }

    public GraphQuery<Entrant> Entrant(ID id)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID!", id),
        };

        return new GraphQuery<Entrant>(client,  "entrant", OperationType.Query, arguments); 
    }

    public GraphQuery<Event> Event(ID id = null, string slug = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
    	    new("slug","String", slug),
        };

        return new GraphQuery<Event>(client,  "event", OperationType.Query, arguments); 
    }

    public GraphQuery<League> League(ID id = null, string slug = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
    	    new("slug","String", slug),
        };

        return new GraphQuery<League>(client,  "league", OperationType.Query, arguments); 
    }

    public GraphQuery<LeagueConnection> Leagues(LeagueQuery query)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("query","LeagueQuery!", query),
        };

        return new GraphQuery<LeagueConnection>(client,  "leagues", OperationType.Query, arguments); 
    }

    public GraphQuery<Participant> Participant(ID id, bool? isAdmin = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID!", id),
    	    new("isAdmin","Boolean", isAdmin),
        };

        return new GraphQuery<Participant>(client,  "participant", OperationType.Query, arguments); 
    }

    public GraphQuery<Phase> Phase(ID id = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
        };

        return new GraphQuery<Phase>(client,  "phase", OperationType.Query, arguments); 
    }

    public GraphQuery<PhaseGroup> PhaseGroup(ID id = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
        };

        return new GraphQuery<PhaseGroup>(client,  "phaseGroup", OperationType.Query, arguments); 
    }

    public GraphQuery<Player> Player(ID id)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID!", id),
        };

        return new GraphQuery<Player>(client,  "player", OperationType.Query, arguments); 
    }

    public GraphQuery<Seed> Seed(ID id = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
        };

        return new GraphQuery<Seed>(client,  "seed", OperationType.Query, arguments); 
    }

    public GraphQuery<Set> Set(ID id)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID!", id),
        };

        return new GraphQuery<Set>(client,  "set", OperationType.Query, arguments); 
    }

    public GraphQuery<Shop> Shop(ID id = null, string slug = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
    	    new("slug","String", slug),
        };

        return new GraphQuery<Shop>(client,  "shop", OperationType.Query, arguments); 
    }

    public GraphQuery<Streams> Stream(ID id)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID!", id),
        };

        return new GraphQuery<Streams>(client,  "stream", OperationType.Query, arguments); 
    }

    public GraphQuery<List<StreamQueue>> StreamQueue(ID tournamentId, bool? includePlayerStreams = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("tournamentId","ID!", tournamentId),
    	    new("includePlayerStreams","Boolean", includePlayerStreams),
        };

        return new GraphQuery<List<StreamQueue>>(client,  "streamQueue", OperationType.Query, arguments); 
    }

    public GraphQuery<Team> Team(ID id = null, string slug = null, string inviteCode = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
    	    new("slug","String", slug),
    	    new("inviteCode","String", inviteCode),
        };

        return new GraphQuery<Team>(client,  "team", OperationType.Query, arguments); 
    }

    public GraphQuery<Tournament> Tournament(ID id = null, string slug = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
    	    new("slug","String", slug),
        };

        return new GraphQuery<Tournament>(client,  "tournament", OperationType.Query, arguments); 
    }

    public GraphQuery<TournamentConnection> Tournaments(TournamentQuery query)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("query","TournamentQuery!", query),
        };

        return new GraphQuery<TournamentConnection>(client,  "tournaments", OperationType.Query, arguments); 
    }

    public GraphQuery<User> User(ID id = null, string slug = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
    	    new("slug","String", slug),
        };

        return new GraphQuery<User>(client,  "user", OperationType.Query, arguments); 
    }

    public GraphQuery<Videogame> Videogame(ID id = null, string slug = null)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("id","ID", id),
    	    new("slug","String", slug),
        };

        return new GraphQuery<Videogame>(client,  "videogame", OperationType.Query, arguments); 
    }

    public GraphQuery<VideogameConnection> Videogames(VideogameQuery query)
    {
	    var arguments = new List<ArgumentValue>
        {
    	    new("query","VideogameQuery!", query),
        };

        return new GraphQuery<VideogameConnection>(client,  "videogames", OperationType.Query, arguments); 
    }

    }
