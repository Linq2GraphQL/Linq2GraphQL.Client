//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Linq2GraphQL.Generator.Templates.Class {
    using System;
    
    
    public partial class ClassTemplate : ClassTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "ClassTemplate.tt"
            this.Write("using System;\nusing System.Collections.Generic;\nusing System.Text.Json.Serializat" +
                    "ion;\nusing Linq2GraphQL.Client;\nusing Linq2GraphQL.Client.Common;\n\nnamespace ");
            
            #line default
            #line hidden
            
            #line 9 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( namespaceName ));
            
            #line default
            #line hidden
            
            #line 9 "ClassTemplate.tt"
            this.Write(";\n\n");
            
            #line default
            #line hidden
            
            #line 11 "ClassTemplate.tt"
 if (NullableEnabled()) { 
            
            #line default
            #line hidden
            
            #line 12 "ClassTemplate.tt"
            this.Write("#pragma warning disable CS8618\n");
            
            #line default
            #line hidden
            
            #line 13 "ClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 14 "ClassTemplate.tt"
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 15 "ClassTemplate.tt"
 if (classType.AllFields.Any(e => e.IsMethod)) { 
            
            #line default
            #line hidden
            
            #line 16 "ClassTemplate.tt"
            this.Write("public static class ");
            
            #line default
            #line hidden
            
            #line 16 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( classType.Name ));
            
            #line default
            #line hidden
            
            #line 16 "ClassTemplate.tt"
            this.Write("Extensions\n{\n");
            
            #line default
            #line hidden
            
            #line 18 "ClassTemplate.tt"
 foreach (var field in classType.AllFields.Where(e => e.IsMethod)) { 
            
            #line default
            #line hidden
            
            #line 19 "ClassTemplate.tt"
            this.Write("    [GraphMethod(\"");
            
            #line default
            #line hidden
            
            #line 19 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.Name ));
            
            #line default
            #line hidden
            
            #line 19 "ClassTemplate.tt"
            this.Write("\")]\n    public static ");
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetFieldCSharpName(field) ));
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.CSharpName ));
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write("(this ");
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( classType.Name ));
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write("  ");
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( classType.Name.ToCamelCase() ));
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.GetArgString(true) ));
            
            #line default
            #line hidden
            
            #line 20 "ClassTemplate.tt"
            this.Write(")\n    {\n        return ");
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( classType.Name.ToCamelCase() ));
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write(".GetMethodValue<");
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetFieldCSharpName(field) ));
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write(">(\"");
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.Name ));
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write("\", ");
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.GetArgNames() ));
            
            #line default
            #line hidden
            
            #line 22 "ClassTemplate.tt"
            this.Write(");\n    }\n\n");
            
            #line default
            #line hidden
            
            #line 25 "ClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 26 "ClassTemplate.tt"
            this.Write("}\n\n");
            
            #line default
            #line hidden
            
            #line 28 "ClassTemplate.tt"

    }

            
            #line default
            #line hidden
            
            #line 31 "ClassTemplate.tt"
 if (classType.HasDescription) {
            
            #line default
            #line hidden
            
            #line 32 "ClassTemplate.tt"
            this.Write("/// <summary>\n/// ");
            
            #line default
            #line hidden
            
            #line 33 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( classType.Description ));
            
            #line default
            #line hidden
            
            #line 33 "ClassTemplate.tt"
            this.Write("\n/// </summary>\n");
            
            #line default
            #line hidden
            
            #line 35 "ClassTemplate.tt"
 
} 

            
            #line default
            #line hidden
            
            #line 38 "ClassTemplate.tt"
            this.Write("public partial class ");
            
            #line default
            #line hidden
            
            #line 38 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( classType.Name ));
            
            #line default
            #line hidden
            
            #line 38 "ClassTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 38 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( classType.GetInterfacesString("GraphQLTypeBase") ));
            
            #line default
            #line hidden
            
            #line 38 "ClassTemplate.tt"
            this.Write("\n{\n");
            
            #line default
            #line hidden
            
            #line 40 "ClassTemplate.tt"
 foreach (var field in classType.AllFields) { 
            
            #line default
            #line hidden
            
            #line 41 "ClassTemplate.tt"
 if (field.IsMethod) { 
            
            #line default
            #line hidden
            
            #line 42 "ClassTemplate.tt"
            this.Write("    private LazyProperty<");
            
            #line default
            #line hidden
            
            #line 42 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetFieldCSharpName(field) ));
            
            #line default
            #line hidden
            
            #line 42 "ClassTemplate.tt"
            this.Write("> _");
            
            #line default
            #line hidden
            
            #line 42 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.Name ));
            
            #line default
            #line hidden
            
            #line 42 "ClassTemplate.tt"
            this.Write(" = new();\n    /// <summary>\n    /// Do not use in Query, only to retrive result\n " +
                    "   /// </summary>\n    [GraphShadowProperty]\n    public ");
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetFieldCSharpName(field) ));
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.CSharpName ));
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(" => _");
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.Name ));
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(".Value(() => GetFirstMethodValue<");
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetFieldCSharpName(field) ));
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(">(\"");
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.Name ));
            
            #line default
            #line hidden
            
            #line 47 "ClassTemplate.tt"
            this.Write("\"));\n\n");
            
            #line default
            #line hidden
            
            #line 49 "ClassTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            
            #line 50 "ClassTemplate.tt"
 if (field.HasDescription) { 
            
            #line default
            #line hidden
            
            #line 51 "ClassTemplate.tt"
            this.Write("    /// <summary>\n    /// ");
            
            #line default
            #line hidden
            
            #line 52 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.Description ));
            
            #line default
            #line hidden
            
            #line 52 "ClassTemplate.tt"
            this.Write("\n    /// </summary>\n");
            
            #line default
            #line hidden
            
            #line 54 "ClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 55 "ClassTemplate.tt"
            this.Write("    [JsonPropertyName(\"");
            
            #line default
            #line hidden
            
            #line 55 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.Name ));
            
            #line default
            #line hidden
            
            #line 55 "ClassTemplate.tt"
            this.Write("\")]\n    public ");
            
            #line default
            #line hidden
            
            #line 56 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetFieldCSharpName(field) ));
            
            #line default
            #line hidden
            
            #line 56 "ClassTemplate.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 56 "ClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( field.CSharpName ));
            
            #line default
            #line hidden
            
            #line 56 "ClassTemplate.tt"
            this.Write(" { get; set; }\n\n");
            
            #line default
            #line hidden
            
            #line 58 "ClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 59 "ClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 60 "ClassTemplate.tt"
 if (classType.HasInterfaces) { 
            
            #line default
            #line hidden
            
            #line 61 "ClassTemplate.tt"
            this.Write("    [JsonPropertyName(\"__typename\")]\n    public string __TypeName { get; set; }\n");
            
            #line default
            #line hidden
            
            #line 63 "ClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 64 "ClassTemplate.tt"
            this.Write("}\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ClassTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
