<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Common;

namespace <#= namespaceName #>;

<# if (NullableEnabled()) { #>
#pragma warning disable CS8618
<# } #>

<# if (classType.AllFields.Any(e => e.IsMethod)) { #>
public static class <#= classType.Name #>Extensions
{
<# foreach (var field in classType.AllFields.Where(e => e.IsMethod)) { #>
    [GraphQLMember("<#= field.Name #>")]
    public static <#= GetFieldCSharpName(field) #> <#= field.CSharpName #>(this <#= classType.Name #>  <#= classType.Name.ToCamelCase() #>, <#= field.GetArgString(true) #>)
    {
        return <#= classType.Name.ToCamelCase() #>.GetMethodValue<<#= GetFieldCSharpName(field) #>>("<#= field.Name #>", <#= field.GetArgNames() #>);
    }

<# } #>
}

<#
    }
#>
<# if (classType.HasDescription) {#>
/// <summary>
/// <#= classType.SummaryDescription #>
/// </summary>
<# 
} 
#>
public partial class <#= classType.Name #> <#= classType.GetInterfacesString("GraphQLTypeBase") #>
{
<# foreach (var field in classType.AllFields) { #>
<# if (field.IsMethod) { #>
    private LazyProperty<<#= GetFieldCSharpName(field) #>> _<#= field.Name #> = new();
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    public <#= GetFieldCSharpName(field) #> <#= field.CSharpName #> => _<#= field.Name #>.Value(() => GetFirstMethodValue<<#= GetFieldCSharpName(field) #>>("<#= field.Name #>"));

<# } else { #>
<# if (field.HasDescription) { #>
    /// <summary>
    /// <#= field.SummaryDescription #>
    /// </summary>
<# } #>
    [GraphQLMember("<#= field.Name #>")]
    [JsonPropertyName("<#= field.Name #>")]
    public <#= GetFieldCSharpName(field) #> <#= field.CSharpName #> { get; set; }

<# } #>
<# } #>
<# if (classType.HasInterfaces) { #>
    [GraphQLMember("__typename")]
    [JsonPropertyName("__typename")]
    public string __TypeName { get; set; }
<# } #>
}
