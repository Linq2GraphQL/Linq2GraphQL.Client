<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;

namespace <#= namespaceName #>;

<# if (classType.AllFields.Any(e => e.IsMethod)) { #>
public static class <#= classType.Name #>Extensions
{
<# foreach (var field in classType.AllFields.Where(e => e.IsMethod)) { #>
    [GraphMethod("<#= field.Name #>")]
    public static <#= GetFieldCSharpName(field) #> <#= field.CSharpName #>(this <#= classType.Name #>  <#= classType.Name.ToCamelCase() #>, <#= field.GetArgString(true) #>)
    {
	    return <#= classType.Name.ToCamelCase() #>?.<#= field.CSharpName #>;
    }

<# } #>
}

<#
    }
#>
public partial class <#= classType.Name #> <#= classType.GetInterfacesString() #>
{
<# foreach (var field in classType.AllFields) { #>
<# if (field.IsMethod) { #>
    /// <summary>
    /// Do not use in Query, only to retrive result
    /// </summary>
    [GraphQLShadowProperty]
<# } #>
	[JsonPropertyName("<#= field.Name #>")]
	public <#= GetFieldCSharpName(field) #> <#= field.CSharpName #> { get; set; }  

<# } #>

<#
    if (classType.HasInterfaces)
    {
#>
    [JsonPropertyName("__typename")]
    public string __TypeName { get; set; }
    <#
        }
#>
}
