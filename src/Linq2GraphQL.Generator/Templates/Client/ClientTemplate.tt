<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
using Linq2GraphQL.Client;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;

namespace <#= namespaceName #>;

public class <#= name #>
{ 
    public <#= name #>(HttpClient httpClient, [FromKeyedServices("<#= name #>")]IOptions<GraphClientOptions> options, IServiceProvider provider)
    {
        var client = new GraphClient(httpClient, options, provider);
<# if (includeQuery) { #>
        Query = new <#= GetMehodName(queryType) #>(client);
<# }#>
<# if (includeMutation) { #>
        Mutation = new <#= GetMehodName(mutationType) #>(client);
<# }#>
<# if (includeSubscriptions) { #>
        Subscription = new <#= GetMehodName(subscriptionType) #>(client); 
<# }#>
    }

<# if (includeQuery) { #>
    public <#= GetMehodName(queryType) #> Query { get; private set; }
<# } #>
<# if (includeMutation) { #>
    public <#= GetMehodName(mutationType) #> Mutation { get; private set; }
<# } #>
<# if (includeSubscriptions) { #>
    public <#= GetMehodName(subscriptionType) #> Subscription { get; private set; }
<# } #>
    
}