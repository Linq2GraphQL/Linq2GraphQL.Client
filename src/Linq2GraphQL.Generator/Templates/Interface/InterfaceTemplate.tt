<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
using System;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using Linq2GraphQL.Client;
using Linq2GraphQL.Client.Converters;

namespace <#= namespaceName #>;

/// <summary>
/// Extension methods for <#= classType.Name #> interface type casting
/// </summary>
public static class <#= classType.Name #>Extensions
{
<# foreach (var field in implementedBy) { #>
    /// <summary>
    /// Casts <#= classType.Name #> to <#= field #> if the runtime type matches
    /// </summary>
    /// <param name="value">The interface value to cast</param>
    /// <returns><#= field #> instance or null if type doesn't match</returns>
    [GraphInterface]
    public static <#= field #> <#= field #>(this <#= classType.Name #> value)
    {
        if (value.__TypeName == "<#= field #>")
        {
            return (<#= field #>)value;
        }
        return null;
    }

<# } #>
}

/// <summary>
/// JSON converter for <#= classType.Name #> interface deserialization
/// </summary>
internal class <#= GetInterfaceConverterName() #> : InterfaceJsonConverter<<#= classType.Name #>>
{
    /// <summary>
    /// Deserializes JSON to the appropriate concrete type based on __typename
    /// </summary>
    /// <param name="typeName">The GraphQL type name from __typename field</param>
    /// <param name="json">The JSON object to deserialize</param>
    /// <returns>Deserialized instance of the appropriate concrete type</returns>
    public override <#= classType.Name #> Deserialize(string typeName, JsonObject json) => typeName switch
    {
<# foreach (var field in implementedBy) { #>
        "<#= field #>" => json.Deserialize<<#= field #>>(),
<# } #>
        _ => json.Deserialize<<#= GetInterfaceConcreteName() #>>()
    };
}

/// <summary>
/// GraphQL interface <#= classType.Name #> with all common fields
/// </summary>
[JsonConverter(typeof(<#= GetInterfaceConverterName() #>))]
public interface <#= classType.Name #> <#= classType.GetInterfacesString() #>
{
<# foreach (var field in classType.AllFields) { 
    var coreType = field.CoreType; #>
    /// <summary>
    /// <#= field.Name #> field from GraphQL schema
    /// </summary>
    [GraphQLMember("<#= field.Name #>")]
    <#= coreType.CSharpTypeDefinition #> <#= field.CSharpName #> { get; set; }

<# } #>
    /// <summary>
    /// GraphQL __typename field for runtime type resolution
    /// </summary>
    [GraphQLMember("__typename")]
    string __TypeName { get; set; }
}

/// <summary>
/// Concrete implementation of <#= classType.Name #> interface for fallback deserialization
/// </summary>
internal class <#= GetInterfaceConcreteName() #> : <#= classType.Name #>
{
<# foreach (var field in classType.AllFields) { 
    var coreType = field.CoreType; #>
    /// <summary>
    /// <#= field.Name #> field from GraphQL schema
    /// </summary>
    [GraphQLMember("<#= field.Name #>")]
    <#= coreType.CSharpTypeDefinition #> <#= field.CSharpName #> { get; set; }

<# } #>
    /// <summary>
    /// GraphQL __typename field for runtime type resolution
    /// </summary>
    [GraphQLMember("__typename")]
    string __TypeName { get; set; }
}